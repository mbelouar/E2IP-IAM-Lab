name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests
        run: |
          python manage.py test

  build-linux:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Linux multi-platform image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.linux
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/secureauth:linux

  # build-windows:
  #   needs: test
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build Docker image (Windows)
  #       run: |
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/secureauth:windows -f Dockerfile.windows .

  #     - name: Push Windows image
  #       run: |
  #         docker push ${{ secrets.DOCKER_USERNAME }}/secureauth:windows

  create-manifest:
    needs: build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Create and push manifest
        run: |
          # Extract individual platform images from the Linux manifest list
          LINUX_AMD64_DIGEST=$(docker manifest inspect ${{ secrets.DOCKER_USERNAME }}/secureauth:linux | jq -r '.manifests[] | select(.platform.architecture=="amd64") | .digest')
          LINUX_ARM64_DIGEST=$(docker manifest inspect ${{ secrets.DOCKER_USERNAME }}/secureauth:linux | jq -r '.manifests[] | select(.platform.architecture=="arm64") | .digest')
          
          # Create new manifest with individual platform images + Windows
          docker manifest create ${{ secrets.DOCKER_USERNAME }}/secureauth:latest \
            ${{ secrets.DOCKER_USERNAME }}/secureauth@$LINUX_AMD64_DIGEST \
            ${{ secrets.DOCKER_USERNAME }}/secureauth@$LINUX_ARM64_DIGEST \
          
          docker manifest push ${{ secrets.DOCKER_USERNAME }}/secureauth:latest
    
