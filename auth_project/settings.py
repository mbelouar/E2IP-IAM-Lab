"""
Django settings for auth_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Try to import SAML dependencies
try:
    import saml2
    from saml2.saml import NAMEID_FORMAT_EMAILADDRESS
    SAML_IMPORTS_AVAILABLE = True
except ImportError:
    SAML_IMPORTS_AVAILABLE = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-()fi^gqzhho1!1e47!w1h4o$y212_a53nx+4f3k+wqz=9xgx8a')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '192.168.1.46', 'secureauth', 'secureauth:8000']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
]

# Add SAML support only if available
try:
    import djangosaml2
    INSTALLED_APPS.append('djangosaml2')
    SAML_AVAILABLE = True
except ImportError:
    SAML_AVAILABLE = False

# Add django_extensions only if it's available (useful for development)
try:
    import django_extensions
    INSTALLED_APPS.append('django_extensions')
except ImportError:
    pass

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
]

# Add SAML middleware only if SAML is available
if SAML_AVAILABLE:
    MIDDLEWARE.append('djangosaml2.middleware.SamlSessionMiddleware')

MIDDLEWARE.extend([
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
])

ROOT_URLCONF = 'auth_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'auth_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

LOGIN_REDIRECT_URL = 'authentication:home'
LOGOUT_REDIRECT_URL = 'authentication:login'
LOGIN_URL = 'authentication:login'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# SAML Configuration - Only configure if SAML is available and not in CI
if SAML_AVAILABLE and SAML_IMPORTS_AVAILABLE and not os.getenv('CI'):
    SAML_CONFIG = {
        'entityid': os.getenv('SAML_ENTITY_ID', 'http://localhost:8000/saml2/metadata/'),
        'description': 'E2IP IAM Lab SAML Service',
        'service': {
            'sp': {
                'name': 'E2IP IAM Lab',
                'name_id_format': NAMEID_FORMAT_EMAILADDRESS,
                'endpoints': {
                    'assertion_consumer_service': [
                        (os.getenv('SAML_ACS_URL', 'https://192.168.1.46:8000/custom-saml-acs/'), saml2.BINDING_HTTP_POST),
                    ],
                    'single_logout_service': [
                        (os.getenv('SAML_SLS_URL', 'https://192.168.1.46:8000/saml2/sls/'), saml2.BINDING_HTTP_REDIRECT),
                    ],
                },
                'force_authn': True,  # Always force fresh authentication
                'name_id_format_allow_create': True,
                'want_response_signed': False,
                'want_assertions_signed': False,
                'want_assertions_or_response_signed': False,
                'authn_requests_signed': False,
                'logout_requests_signed': False,
                'allow_unsolicited': False,  # Disable IdP-initiated SSO to force fresh requests
                'only_use_keys_in_metadata': False,  # Don't restrict to metadata keys
                'disable_ssl_certificate_validation': True,  # For development
            },
        },
        'debug': DEBUG,
        # Disable all signature verification
        'verify_ssl_cert': False,
        'xmlsec_binary': '/opt/homebrew/bin/xmlsec1',
    }

    # Configure SAML with ADFS metadata file
    metadata_file = BASE_DIR / 'saml_metadata' / 'adfs_metadata.xml'
    if metadata_file.exists():
        SAML_CONFIG['metadata'] = {
            'local': [str(metadata_file)],
        }

    # SAML attribute mapping
    SAML_ATTRIBUTE_MAPPING = {
        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': ('email', 'username'),
        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname': ('first_name',),
        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname': ('last_name',),
        'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': ('username',),
    }

    # SAML user creation settings
    SAML_CREATE_UNKNOWN_USER = True
    SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'username'
    SAML_DJANGO_USER_MAIN_ATTRIBUTE_LOOKUP = '__iexact'

# Authentication backends
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']

if SAML_AVAILABLE and SAML_IMPORTS_AVAILABLE and not os.getenv('CI'):
    AUTHENTICATION_BACKENDS.append('djangosaml2.backends.Saml2Backend')
